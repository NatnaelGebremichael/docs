{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#code-examples","title":"Code-examples","text":"<p>An example of a codeblock for Python:</p> add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>Example codeblock for JavaScript with lines highlighted:</p> concatenate_strings.js<pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Example of an admonition/callout with a title:</p> <p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"#diagram","title":"Diagram","text":""},{"location":"#diagram-examples","title":"Diagram Examples","text":""},{"location":"#flowcharts","title":"Flowcharts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"#content-tabs","title":"Content-Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"readme/","title":"Readme","text":""},{"location":"readme/#reources","title":"Reources","text":"<ul> <li>getting-started-with-material-for-mkdocs </li> <li>Youtube </li> </ul>"},{"location":"readme/#basic-setup-and-installation-windows-cmd","title":"Basic setup and Installation Windows (CMD)","text":"<ol> <li>Check Python version <code>where python</code> and <code>where python3</code></li> <li>Create a python virtual enviroment using <code>python -m venv venv</code></li> <li>To activate that enviroment we will run <code>.venv/Scripts/activate</code> or <code>venv\\Scripts\\activate</code> or in bash <code>source venv/Scripts/activate</code></li> <li>Check the pip version using <code>pip --version</code></li> <li>Now we can install MkDocs <code>pip install mkdocs-material</code></li> <li>in VsCode check you are in venv</li> <li>Create my new mkdocs site by <code>mkdocs new .</code></li> <li>Note: new docs folder and mkdocs.yml have been created</li> <li>In the yml file add the following basic config    <code>site_name: myDocs    site_url: https://docs.natnael.dev    theme:      name: material</code></li> <li>Save the file</li> <li>In the terminal do <code>mkdocs serve</code></li> <li>you should see your site running on local host on a given port </li> </ol> <p>Just like that we have our basic doc up and running </p>"},{"location":"readme/#modification-to-the-basic-mkdocs-cmd","title":"Modification to the basic mkdocs (CMD)","text":"<p>To get the most out of mkdocs material we need to make more changes to the mkdocs.yml file.</p> <ol> <li>It is easy to make mistakes or error when updating yml file. which is why we will install material for mkdocs schema to clear or prevent error in our yml file.</li> <li>Make sure yaml by Redhut extensiion is installed on your VSCode  </li> <li>Add the following at the bottom of the settings.json file with in the first {} and add comma to the previous line if it doesnt have one: <pre><code> \"yaml.schemas\": {\n    \"https://squidfunk.github.io/mkdocs-material/schema.json\": \"mkdocs.yml\"\n  },\n  \"yaml.customTags\": [\n    \"!ENV scalar\",\n    \"!ENV sequence\",\n    \"!relative scalar\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.to_svg\",\n    \"tag:yaml.org,2002:python/name:material.extensions.emoji.twemoji\",\n    \"tag:yaml.org,2002:python/name:pymdownx.superfences.fence_code_format\"\n  ]\n</code></pre></li> <li>After this hovering over the lines in the mkdocs should show you </li> </ol>"},{"location":"readme/#adjust-color-scheme","title":"Adjust Color Scheme","text":"<p>We can easily change the color scheme of our documentation.</p> <p>Switch to Dark Mode Start by changing the color scheme to \u26ab dark. Add this to the mkdocs.yml file: mkdocs.yml</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n</code></pre>"},{"location":"readme/#primary-colour","title":"Primary Colour","text":"<p>Let's also change the primary colour in our documentation to \ud83d\udfe2 green by adding primary: green under the palette: mkdocs.yml</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n    primary: green\n</code></pre> <p>We can see that this makes the banner green, and also the hyperlinks green.</p>"},{"location":"readme/#accent-colour","title":"Accent Colour","text":"<p>Let's also change the accent colour to \ud83d\udfe3 deep purple : mkdocs.yml</p> <pre><code>theme:\n  name: material\n  palette:\n    scheme: slate\n    primary: green\n    accent: deep purple\n</code></pre> <p>Now when we hover over the links with the mouse, they turn purple.</p>"},{"location":"readme/#toggle-lightdark-modes","title":"Toggle Light/Dark Modes","text":"<p>We can also add a toggle to our site that allows the user to switch between \u26aa light and \u26ab dark modes. Add this to palette in the mkdocs.yml file to enable this: mkdocs.yml</p> <pre><code>theme:\n  name: material\n  palette:\n    # Dark Mode\n    - scheme: slate\n      toggle:\n        icon: material/weather-sunny\n        name: Dark mode\n      primary: green\n      accent: deep purple\n\n    # Light Mode\n    - scheme: default\n      toggle:\n        icon: material/weather-night\n        name: Light mode\n      primary: blue\n      accent: deep orange\n</code></pre> <p>There are lots of other configuration options available to you in Material for MkDocs if you want to adjust the colour, for example adding custom colours or automatically switching between light and dark mode based on the time of day.</p> <p>For more information, check the colors documentation page.</p>"},{"location":"readme/#adjust-font","title":"Adjust Font","text":"<p>Material for MkDocs supports any Google font directly out of the box.</p>"},{"location":"readme/#default-font","title":"Default Font","text":"<p>Let's change the default font to Merriweather Sans:mkdocs.yml</p> <pre><code>theme:\n  font:\n    text: Merriweather Sans\n</code></pre>"},{"location":"readme/#code-font","title":"Code Font","text":"<p>We can also change the font of the code in our docs: mkdocs.yml</p> <pre><code>theme:\n  font:\n    text: Merriweather Sans\n    code: Red Hat Mono\n</code></pre> <p>If you want to add additional fonts beyond Google fonts, or change other font configuration, do check the Material font documentation</p>"},{"location":"readme/#emojs","title":"Emojs","text":"<p>Material for MkDocs offers the possibility of using over 10,000 emojis and icons in your documentation with minimal configuration.</p> <p>Browse through all available emojis and icons on the Material Emoji Documentation.</p> <p>To add the ability to use these to your documentation portal, add this config to your mkdocs.yml: mkdocs.yml</p> <p><pre><code>markdown_extensions:\n  - attr_list\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre> Then simply add a sentence to any of your documentation files (e.g.index.md) with the emoji or icon code.</p>"},{"location":"readme/#logos-and-icons","title":"Logos and Icons","text":"<p>Now that we have emojis and icons setup in our documentation, we can easily change the logo of our site.</p>"},{"location":"readme/#setting-logo-to-an-icon","title":"Setting Logo to an Icon","text":"<p>Search for a suitable icon for your logo (for example solid-w).</p> <p>Change the icon by making this change to the mkdocs.yml mkdocs.yml</p> <pre><code>theme:\n  icon:\n    logo: fontawesome/solid/w\n</code></pre>"},{"location":"readme/#setting-logo-to-an-image","title":"Setting Logo to an Image","text":"<p>If you would prefer to set the logo of your site to your own custom image, follow these steps:</p> <p>Inside the docs folder create an assets folder. Add the logo.png file to this folder (i.e. the file with the logo you want to use) Now change mkdocs.yml to: mkdocs.yml</p> <pre><code>theme:\n  logo: assets/logo.png\n</code></pre>"},{"location":"readme/#setting-the-favicon","title":"Setting the Favicon","text":"<p>We can also set the Favicon for our site in a similar way:</p> <p>First add the favicon.ico file to the assets folder we just created. Then adjust mkdocs.yml to: mkdocs.yml</p> <pre><code>theme:\n  favicon: assets/favicon.ico\n</code></pre> <p>You can change other icons on your MkDocs Material site in a similar way, but if you want to know more check the Material Logo and Icons Documentation.</p>"},{"location":"readme/#code-blocks","title":"Code Blocks","text":"<p>One of the best features of Material for MkDocs is it's ability to display code in a clear, crisp and distinctive manner.</p> <ul> <li>Create a new page in your documentation called code-examples.md.</li> <li>Add the following example  Python code: code-examples.md</li> </ul> <p><pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> The code will display in a code block in the documentation portal, but won't have syntax colouring. To enable syntax colouring, add this extra configuration to our mkdocs.yml:</p> <p>mkdocs.yml <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n      line_spans: __span\n      pygments_lang_class: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n</code></pre> The previous code block we added will now be nicely highlighted.</p> <p>If you want to add code in another language, find the lexers (short names for the language) on this pygments page. For example:  - Typescript  - Java  - GoLang</p>"},{"location":"readme/#add-title","title":"Add Title","text":"<p>Add a title to the codeblock by typing py title=\"add_numbers.py\": Code block with title</p> <pre><code>```py title=\"add_numbers.py\" \n# Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <pre><code>code_examples.md\n\n# Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"readme/#add-line-numbers","title":"Add Line Numbers","text":"<p>Add line numbers by typing py linenums=\"1\":</p> <p>Code block with line numbers</p> <p><pre><code>```py title=\"add_numbers.py\" linenums=\"1\"\n# Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> code_examples.md</p> <pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre> <p>You can also start the line numbers from a different number e.g. py linenums=\"5\"</p>"},{"location":"readme/#highlight-lines","title":"Highlight Lines","text":"<p>To highlight lines type py hl_lines=\"2-4\".</p> <p>Here is another codeblock to show this:</p> <p>Highlight Lines</p> <p><pre><code>```js title=\"code-examples.md\" linenums=\"1\" hl_lines=\"2-4\"\n// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre> code-examples.md</p> <pre><code>// Function to concatenate two strings\nfunction concatenateStrings(str1, str2) {\n  return str1 + str2;\n}\n\n// Example usage\nconst result = concatenateStrings(\"Hello, \", \"World!\");\nconsole.log(\"The concatenated string is:\", result);\n</code></pre>"},{"location":"readme/#content-tabs","title":"Content Tabs","text":"<p>Content tabs are useful when you want to group alternative content together. To enable content tabs add the following to the mkdocs.yml file: mkdocs.yml</p> <pre><code>markdown_extensions:\n  - pymdownx.superfences\n  - pymdownx.tabbed:\n      alternate_style: true\n</code></pre> <ul> <li>Create a new page called content-tabs.md</li> <li>Add the following to show generic content tabs: content-tabs.md</li> </ul> <pre><code>## Content Tabs\n\nThis is some examples of content tabs.\n\n### Generic Content\n\n=== \"Plain text\"\n\n    This is some plain text\n\n=== \"Unordered list\"\n\n    * First item\n    * Second item\n    * Third item\n\n=== \"Ordered list\"\n\n    1. First item\n    2. Second item\n    3. Third item\n</code></pre> <p>Here is an example with different code blocks: content-tabs.md</p> <pre><code>### Code Blocks in Content Tabs\n\n=== \"Python\"\n\n    ```py\n    def main():\n        print(\"Hello world!\")\n\n    if __name__ == \"__main__\":\n        main()\n    ```\n\n=== \"JavaScript\"\n\n    ```js\n    function main() {\n        console.log(\"Hello world!\");\n    }\n\n    main();\n    ```\n</code></pre>"},{"location":"readme/#admonitions-aka-callouts","title":"Admonitions (aka Callouts)","text":"<p>Admonitions - also known as callouts - are great for highlighting parts of the documentation.</p> <p>To enable them, add this configuration to the mkdocs.yml: mkdocs.yml</p> <pre><code>markdown_extensions:\n  - admonition\n  - pymdownx.details\n  - pymdownx.superfences\n</code></pre> <ul> <li>Create a new page called admonitions.md</li> <li>This is an example of an adominition with a title:</li> </ul> <pre><code>!!! note \"Title of the callout\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <pre><code>Title of the callout\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\n</code></pre>"},{"location":"readme/#collapsible-admonitions","title":"Collapsible Admonitions","text":"<p>You can also have a collapisble admonition:</p> <p>Collapsible callout:</p> <pre><code>??? info \"Collapsible callout\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n</code></pre> <p>Collapsible callout Check the Admonitions documentation for other examples of admonitions you can use.</p>"},{"location":"readme/#diagrams","title":"Diagrams","text":"<p>Material for MkDocs allows you to easily implement statically rendered diagrams in your documentation. Examples of diagrams you might include are:</p> <ul> <li>Flow charts</li> <li>Sequence diagrams</li> <li>State diagrams</li> <li>Class diagrams</li> <li>Entity-relationship diagrams</li> </ul> <p>To enable diagrams add this configuration to the mkdocs.yml:mkdocs.yml</p> <pre><code>markdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n</code></pre> <ul> <li>Create a new page called diagram-examples.md</li> <li>Here is a flowchart example: diagram-examples.md</li> </ul> <p><pre><code>    # Diagram Examples\n\n    ## Flowcharts\n\n    ```mermaid\n    graph LR\n    A[Start] --&gt; B{Failure?};\n    B --&gt;|Yes| C[Investigate...];\n    C --&gt; D[Debug];\n    D --&gt; B;\n    B ----&gt;|No| E[Success!];\n    ```\n</code></pre> This is a sequence diagram example: diagram-examples.md</p> <p><pre><code>    ## Sequence Diagrams\n\n    ```mermaid\n    sequenceDiagram\n    autonumber\n    Server-&gt;&gt;Terminal: Send request\n    loop Health\n        Terminal-&gt;&gt;Terminal: Check for health\n    end\n    Note right of Terminal: System online\n    Terminal--&gt;&gt;Server: Everything is OK\n    Terminal-&gt;&gt;Database: Request customer data\n    Database--&gt;&gt;Terminal: Customer data\n    ```\n</code></pre> Remember to check the diagrams documentation for further diagram examples.</p>"},{"location":"readme/#footer","title":"Footer","text":"<p>We can enable the navigation footer by adding the following to the mkdocs.yml:</p> <p>mkdocs.yml <pre><code>theme:\n  features:\n    - navigation.footer\n</code></pre></p> <p>You might want to add social icons to your footer like this: mkdocs.yml</p> <pre><code>extra:\n  social:\n    - icon: simple/youtube\n      link: https://youtube.com/@james-willett\n    - icon: simple/linkedin\n      link: https://linkedin.com/in/willettjames\n</code></pre> <p>And you can add the copyright notice: mkdocs.yml</p> <pre><code>copyright: Copyright &amp;copy; 2024 James Willett\n</code></pre>"},{"location":"readme/#optional-step","title":"Optional Step","text":""},{"location":"readme/#publish-site-to-github-pages","title":"Publish site to GitHub Pages","text":"<p>In order to publish our site on GitHub Pages, first create the .github/workflows/ci.yml file and paste in the example code:</p> <p>.github/workflows/ci.yml</p> <pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre> <ul> <li>Create a brand new GitHub repository</li> <li>Hook up that GitHub repository remote with the project code (i.e. do git init then follow instructions to add the remote)</li> <li>Push branch to main on the GitHub repository</li> <li>Go to GitHub and into settings and change pages to deploy from branch, choose the gh-pages branch.</li> <li>A GitHub Action will trigger that deploys the site</li> <li>For example https://james-willett.github.io/mkdocs-material-tutorial-2024/</li> </ul>"},{"location":"readme/#to-deploy-to-vercel","title":"To Deploy to Vercel","text":"<ol> <li>Build your site locally: Run the following commands in your project root: <pre><code>pip install -r requirements.txt\nmkdocs build\n</code></pre></li> </ol> <p>This will create a site directory with your built static files.</p> <ol> <li> <p>Update your .gitignore file: Remove or comment out any line that ignores the site directory. This ensures that your built files are included in your Git repository.</p> </li> <li> <p>Add and commit the built files: <pre><code>git add site\ngit commit -m \"Add built site files\"\n</code></pre></p> </li> <li> <p>Update your vercel.json: We'll simplify this file to just serve the static files:</p> </li> </ol> <pre><code>{\n  \"version\": 2,\n  \"builds\": [\n    {\n      \"src\": \"site/**\",\n      \"use\": \"@vercel/static\"\n    }\n  ],\n  \"routes\": [\n    {\n      \"src\": \"/(.*)\",\n      \"dest\": \"/site/$1\"\n    }\n  ]\n}\n</code></pre> <ol> <li> <p>In your Vercel project settings:</p> </li> <li> <p>Go to the Vercel dashboard for your project</p> </li> <li>Navigate to \"Settings\" &gt; \"General\"</li> <li> <p>Under \"Build &amp; Development Settings\":</p> <ul> <li>Set the Build Command to: echo \"No build required\"</li> <li>Set the Output Directory to: site</li> </ul> </li> <li> <p>Commit and push these changes to your GitHub repository: <pre><code>git add vercel.json\ngit commit -m \"Update Vercel configuration for pre-built site\"\ngit push\n</code></pre> In the Vercel dashboard, go to your project and click \"Redeploy\" to trigger a new deployment with these changes.</p> </li> </ol>"},{"location":"Inventory%20Managment/Home/","title":"Home","text":""},{"location":"Inventory%20Managment/Home/#build-a-fullstack-inventory-management-dashboard","title":"Build a Fullstack Inventory Management Dashboard","text":"<p>Starting Tutorial</p> <p></p> <p>Link to related video: https://www.youtube.com/watch?v=ddKQ8sZo_v8</p>"},{"location":"Inventory%20Managment/Home/#tutorial","title":"Tutorial","text":"<p>This repository contains the code corresponding to an in-depth tutorial available on my YouTube channel. It is highly suggested to watch the tutorial video as it includes detailed instructions on how to set up everything, including deploying AWS. This tutorial is designed for both beginners and experts.</p> <p>Join our Discord community for discussions about this specific app.</p>"},{"location":"Inventory%20Managment/Home/#tech-stack","title":"Tech Stack","text":"<ul> <li>Next JS</li> <li>Tailwind</li> <li>Redux Toolkit</li> <li>Redux Toolkit Query</li> <li>Material UI Data Grid</li> <li>Node.js</li> <li>Prisma</li> <li>AWS EC2</li> <li>AWS RDS</li> <li>AWS API Gateway</li> <li>AWS Amplify</li> <li>AWS S3</li> </ul>"},{"location":"Inventory%20Managment/Home/#resources-and-links","title":"Resources and Links","text":""},{"location":"Inventory%20Managment/Home/#image-files","title":"Image Files","text":"<ul> <li>Server assets to download</li> </ul>"},{"location":"Inventory%20Managment/Home/#configuration-and-code","title":"Configuration and Code","text":"<ul> <li>tailwind.config.ts (to copy)</li> <li>Redux store file (to copy)</li> <li>Seed files for database (to copy)</li> <li>Seed data files (to download)</li> </ul>"},{"location":"Inventory%20Managment/Home/#additional-resources","title":"Additional Resources","text":"<ul> <li>Data model diagram</li> <li>Prisma schema file</li> <li>AWS commands</li> </ul>"},{"location":"Inventory%20Managment/Inventory%20Managment/","title":"Database Schema","text":"<pre><code>erDiagram\n    Organization ||--o{ User : has\n    Organization ||--o{ Product : has\n    Organization ||--o{ Category : has\n    User ||--o{ Sale : makes\n    User ||--o{ Purchase : makes\n    User ||--o{ Expense : records\n    User ||--o{ Employment : has\n    Product ||--o{ Sale : involves\n    Product ||--o{ Purchase : involves\n    Product ||--o{ Waste : involves\n    Category ||--o{ Expense : categorizes\n    Employment ||--o{ Leave : has\n    Purchase }o--|| PurchaseSummary : summarized_in\n    Expense }o--|| ExpenseSummary : summarized_in\n    ExpenseSummary ||--o{ ExpenseByCategory : breaks_down\n\n    Organization {\n        UUID id PK\n        VARCHAR name\n        VARCHAR plan\n    }\n\n    User {\n        UUID id PK\n        UUID organizationId FK\n        VARCHAR name\n        VARCHAR email\n        ENUM role\n    }\n\n    Product {\n        UUID id PK\n        UUID organizationId FK\n        VARCHAR name\n        FLOAT price\n        FLOAT rating\n        INT stockQuantity\n    }\n\n    Category {\n        UUID id PK\n        UUID organizationId FK\n        VARCHAR name\n    }\n\n    Sale {\n        UUID id PK\n        UUID productId FK\n        UUID userId FK\n        TIMESTAMP timestamp\n        INT quantity\n        FLOAT unitPrice\n        FLOAT totalAmount\n    }\n\n    Purchase {\n        UUID id PK\n        UUID productId FK\n        UUID userId FK\n        TIMESTAMP timestamp\n        INT quantity\n        FLOAT unitCost\n        FLOAT totalCost\n        ENUM paymentType\n        TIMESTAMP dueDate\n        BOOLEAN isPaid\n        UUID purchaseSummaryId FK\n    }\n\n    Expense {\n        UUID id PK\n        UUID userId FK\n        UUID categoryId FK\n        FLOAT amount\n        TIMESTAMP timestamp\n        UUID expenseSummaryId FK\n    }\n\n    Waste {\n        UUID id PK\n        UUID productId FK\n        INT quantity\n        VARCHAR reason\n        TIMESTAMP timestamp\n    }\n\n    Employment {\n        UUID id PK\n        UUID userId FK\n        TIMESTAMP startDate\n        VARCHAR contractType\n        VARCHAR[] documents\n    }\n\n    Leave {\n        UUID id PK\n        UUID employmentId FK\n        ENUM type\n        TIMESTAMP startDate\n        TIMESTAMP endDate\n        ENUM status\n    }\n\n    SalesSummary {\n        UUID id PK\n        TIMESTAMP period\n        FLOAT totalSales\n        INT totalQuantity\n        FLOAT averageOrderSize\n        VARCHAR sourceDataHash\n    }\n\n    PurchaseSummary {\n        UUID id PK\n        TIMESTAMP period\n        FLOAT totalPurchases\n        INT totalQuantity\n        FLOAT averageOrderValue\n        VARCHAR sourceDataHash\n    }\n\n    ExpenseSummary {\n        UUID id PK\n        TIMESTAMP period\n        FLOAT totalExpenses\n        VARCHAR sourceDataHash\n    }\n\n    ExpenseByCategory {\n        UUID id PK\n        UUID expenseSummaryId FK\n        UUID categoryId FK\n        FLOAT amount\n    }</code></pre>"},{"location":"Inventory%20Managment/Server%20-%20Inventory%20Managment/","title":"Server - Docs","text":""},{"location":"Inventory%20Managment/Server%20-%20Inventory%20Managment/#sam-cofig-trouble-shooting","title":"SAM Cofig trouble shooting","text":"<p>If you're encountering an issue where the sam command is available in CMD but not in the VS Code terminal (Bash). This is likely due to the PATH environment variable not being correctly set in your VS Code Bash environment.</p> <ul> <li><code>Copytouch ~/.bash_profile</code>- create a .bash_profile file.</li> <li><code>nano ~/.bash_profile</code> - edit .bash_profile file.</li> <li>Next - add the following lines into the file</li> </ul> <pre><code>    if [ -f ~/.bashrc ]; then # The configuration file.\n        . ~/.bashrc\n    fi\n\n    export PATH=$PATH:\"/c/Program Files/Amazon/AWSSAMCLI/bin\"\n</code></pre> <ul> <li>Save and exit nano (Ctrl + O, Enter, then Ctrl + X).</li> <li> <p>Now, let's also edit the .bashrc file to ensure it has the correct content: <code>nano ~/.bashrc</code></p> </li> <li> <p>Add this line at the end of the file if it's not already there: <code>export PATH=$PATH:\"/c/Program Files/Amazon/AWSSAMCLI/bin\"</code></p> </li> <li> <p>Save and exit nano (Ctrl + O, Enter, then Ctrl + X). *Now, let's reload both files: <pre><code>source ~/.bash_profile\nsource ~/.bashrc\n</code></pre></p> </li> <li>Try running <code>sam --version</code> again.</li> <li>If sam --version still doesn't work, let's try the alias method directly in your current session:  <code>alias sam='\"/c/Program Files/Amazon/AWSSAMCLI/bin/sam.cmd\"'</code></li> <li>Then try <code>sam --version</code> again.</li> <li>If it works with the alias, we can add this alias to your .bashrc file for future sessions. <code>nano ~/.bash_profile</code></li> <li>Add this line at the end of the file if it's not already there: <code>alias sam='\"/c/Program Files/Amazon/AWSSAMCLI/bin/sam.cmd\"'</code></li> <li>Save and exit nano (Ctrl + O, Enter, then Ctrl + X). <code>nano ~/.bashrc</code></li> <li>Add this line at the end of the file if it's not already there: <code>alias sam='\"/c/Program Files/Amazon/AWSSAMCLI/bin/sam.cmd\"'</code></li> <li>Save and exit nano (Ctrl + O, Enter, then Ctrl + X).</li> <li>Now, let's reload both files: <pre><code>source ~/.bash_profile\nsource ~/.bashrc\n</code></pre></li> </ul> <p>If none of these methods work, there might be an issue with the installation of SAM CLI or how Windows is interacting with your Bash environment. In this case, you have a few options:</p> <ol> <li>You can use the full path to sam.cmd in your commands. Instead of sam, use <code>/c/Program Files/Amazon/AWSSAMCLI/bin/sam.cmd</code>.</li> <li>You can try reinstalling the SAM CLI, making sure to select the option to add it to your PATH during installation.</li> <li>You can use the SAM CLI from the Windows Command Prompt or PowerShell, where it seems to be working correctly.</li> </ol>"},{"location":"Inventory%20Managment/aws-ec2-instructions/","title":"EC2 Setup Instructions","text":""},{"location":"Inventory%20Managment/aws-ec2-instructions/#1-connect-to-ec2-instance-via-ec2-instance-connect","title":"1. Connect to EC2 Instance via EC2 Instance Connect","text":""},{"location":"Inventory%20Managment/aws-ec2-instructions/#2-install-node-version-manager-nvm-and-nodejs","title":"2. Install Node Version Manager (nvm) and Node.js","text":"<ul> <li>Switch to superuser and install nvm:</li> </ul> <pre><code>sudo su -\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n</code></pre> <ul> <li>Activate nvm:</li> </ul> <pre><code>. ~/.nvm/nvm.sh\n</code></pre> <ul> <li>Install the latest version of Node.js using nvm:</li> </ul> <pre><code>nvm install node\n</code></pre> <ul> <li>Verify that Node.js and npm are installed:</li> </ul> <pre><code>node -v\nnpm -v\n</code></pre>"},{"location":"Inventory%20Managment/aws-ec2-instructions/#3-install-git","title":"3. Install Git","text":"<ul> <li>Update the system and install Git:</li> </ul> <pre><code>sudo yum update -y\nsudo yum install git -y\n</code></pre> <ul> <li>Check Git version:</li> </ul> <pre><code>git --version\n</code></pre> <ul> <li>Clone your code repository from GitHub:</li> </ul> <pre><code>git clone [your-github-link]\n</code></pre> <ul> <li>Navigate to the directory and install packages:</li> </ul> <pre><code>cd inventory-management\nnpm i\n</code></pre> <ul> <li>Create Env File and Port 80:</li> </ul> <pre><code>echo \"PORT=80\" &gt; .env\n</code></pre> <ul> <li>Start the application:</li> </ul> <pre><code>npm start\n</code></pre>"},{"location":"Inventory%20Managment/aws-ec2-instructions/#4-install-pm2-production-process-manager-for-nodejs","title":"4. Install pm2 (Production Process Manager for Node.js)","text":"<ul> <li>Install pm2 globally:</li> </ul> <pre><code>npm i pm2 -g\n</code></pre> <ul> <li>Create a pm2 ecosystem configuration file (inside server directory):</li> </ul> <pre><code>module.exports = { apps : [{ name: 'inventory-management', script: 'npm', args: 'run dev', env: { NODE_ENV: 'development', ENV_VAR1: 'environment-variable', } }], };\n</code></pre> <ul> <li>Modify the ecosystem file if necessary:</li> </ul> <pre><code>nano ecosystem.config.js\n</code></pre> <ul> <li>Set pm2 to restart automatically on system reboot:</li> </ul> <pre><code>sudo env PATH=$PATH:$(which node) $(which pm2) startup systemd -u $USER --hp $(eval echo ~$USER)\n</code></pre> <ul> <li>Start the application using the pm2 ecosystem configuration:</li> </ul> <pre><code>pm2 start ecosystem.config.js\n</code></pre> <ul> <li> <p>Useful pm2 commands:</p> </li> <li> <p>Stop all processes:</p> </li> </ul> <pre><code>pm2 stop all\n</code></pre> <ul> <li>Delete all processes:</li> </ul> <pre><code>pm2 delete all\n</code></pre> <ul> <li>Check status of processes:</li> </ul> <pre><code>pm2 status\n</code></pre> <ul> <li>Monitor processes:</li> </ul> <pre><code>pm2 monit\n</code></pre>"},{"location":"Inventory%20Managment/seeding/","title":"DB Seeding Instructions","text":""},{"location":"Inventory%20Managment/seeding/#prepare-your-database_url","title":"Prepare your DATABASE_URL","text":"<ol> <li>Go to https://www.urlencoder.org/</li> <li>Paste your database password into the encoder</li> <li>Copy the encoded password</li> <li>Update your <code>.env</code> file with the encoded password in the DATABASE_URL: <code>DATABASE_URL=\"postgresql://postgres:&lt;encoded-password&gt;@localhost:5432/inventorymanagment\"</code> Replace <code>&lt;encoded-password&gt;</code> with the actual encoded password.</li> </ol>"},{"location":"Inventory%20Managment/seeding/#seeding-steps","title":"Seeding Steps","text":"<ol> <li>Generate Prisma client: <code>npx prisma generate</code></li> <li>If you're starting fresh or want to reset the database: <code>npx prisma migrate reset</code> </li> <li>If the database schema already exists and you want to apply new changes: <code>npx prisma migrate dev --name init_new_schema</code></li> <li>Run the seeding script: <code>npm run seed</code></li> </ol>"},{"location":"Inventory%20Managment/seeding/#updated-schema-relationships-and-logic","title":"Updated Schema Relationships and Logic","text":""},{"location":"Inventory%20Managment/seeding/#core-entities","title":"Core Entities","text":""},{"location":"Inventory%20Managment/seeding/#1-user","title":"1. User","text":"<ul> <li>Central entity representing employees or system users</li> <li> <p>Relationships:</p> </li> <li> <p>One-to-Many with Sale (as seller)</p> </li> <li>One-to-Many with Purchase (as purchaser)</li> <li>One-to-Many with Expense (as expense creator)</li> <li> <p>One-to-One with Employment</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#2-product","title":"2. Product","text":"<ul> <li>Represents items sold by the business</li> <li> <p>Relationships:</p> </li> <li> <p>One-to-Many with Sale</p> </li> <li>One-to-Many with Purchase</li> <li> <p>One-to-Many with Waste</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#3-category","title":"3. Category","text":"<ul> <li>Represents expense categories</li> <li> <p>Relationships:</p> </li> <li> <p>One-to-Many with Expense</p> </li> <li> <p>One-to-Many with ExpenseCategoryBreakdown</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#transactional-entities","title":"Transactional Entities","text":""},{"location":"Inventory%20Managment/seeding/#4-sale","title":"4. Sale","text":"<ul> <li>Represents individual sales transactions</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with User (seller)</p> </li> <li> <p>Many-to-One with Product</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#5-purchase","title":"5. Purchase","text":"<ul> <li>Represents inventory purchases</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with User (purchaser)</p> </li> <li> <p>Many-to-One with Product</p> </li> <li> <p>Includes payment type (DEBT/PAID) and payment status</p> </li> <li>Includes soft delete and timestamp fields</li> </ul>"},{"location":"Inventory%20Managment/seeding/#6-expense","title":"6. Expense","text":"<ul> <li>Represents business expenses</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with User (expense creator)</p> </li> <li> <p>Many-to-One with Category</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#7-waste","title":"7. Waste","text":"<ul> <li>Tracks product waste</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with Product</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#employee-management","title":"Employee Management","text":"<p>Employment</p>"},{"location":"Inventory%20Managment/seeding/#8-stores-employee-contract-details","title":"8. Stores employee contract details","text":"<ul> <li> <p>Relationships:</p> </li> <li> <p>One-to-One with User</p> </li> <li> <p>One-to-Many with Leave</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#9-leave","title":"9. Leave","text":"<ul> <li>Tracks employee leave</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with Employment</p> </li> <li> <p>Includes soft delete and timestamp fields</p> </li> </ul>"},{"location":"Inventory%20Managment/seeding/#summary-entities","title":"Summary Entities","text":""},{"location":"Inventory%20Managment/seeding/#10-salessummary","title":"10. SalesSummary","text":"<ul> <li>Aggregates sales data for reporting</li> <li>Includes sourceDataHash for data integrity</li> <li>Includes timestamp fields</li> </ul>"},{"location":"Inventory%20Managment/seeding/#11-purchasesummary","title":"11. PurchaseSummary","text":"<ul> <li>Aggregates purchase data for reporting</li> <li>Includes sourceDataHash for data integrity</li> <li>Includes timestamp fields</li> </ul>"},{"location":"Inventory%20Managment/seeding/#12-expensesummary","title":"12. ExpenseSummary","text":"<ul> <li>Aggregates expense data for reporting</li> <li> <p>Relationships:</p> </li> <li> <p>One-to-Many with ExpenseCategoryBreakdown</p> </li> <li>Includes sourceDataHash for data integrity</li> <li>Includes timestamp fields</li> </ul>"},{"location":"Inventory%20Managment/seeding/#13-expensecategorybreakdown","title":"13. ExpenseCategoryBreakdown","text":"<ul> <li>Provides detailed expense breakdown by category</li> <li> <p>Relationships:</p> </li> <li> <p>Many-to-One with ExpenseSummary</p> </li> <li>Many-to-One with Category</li> </ul>"},{"location":"Inventory%20Managment/seeding/#key-changes","title":"Key Changes","text":"<ul> <li>All entities now include createdAt, updatedAt, and deletedAt fields for better auditing and soft delete functionality</li> <li>Summary tables include sourceDataHash for data integrity verification</li> <li>All monetary values are assumed to be in Ethiopian Birr (no separate currency field needed)</li> </ul>"}]}